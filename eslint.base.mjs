import { fixupConfigRules } from "@eslint/compat";
import stylistic from "@stylistic/eslint-plugin";
import pluginReactConfig from "eslint-plugin-react/configs/recommended.js";
import tseslint from "typescript-eslint";

export default [
  ...tseslint.configs.strictTypeChecked,
  ...fixupConfigRules(pluginReactConfig),
  {
    files: ["**/*.{js,mjs,cjs,ts,jsx,tsx}"],

    plugins: {
      "@stylistic": stylistic,
    },

    languageOptions: {
      parserOptions: {
        ecmaFeatures: {
          jsx: true,
        },
      },
    },

    rules: {
      "array-callback-return": "error",
      "no-constant-condition": "off", // Disable this because while (true) is often useful
      "no-constructor-return": "error",
      "no-duplicate-imports": "error",
      "no-self-compare": "error",
      "no-template-curly-in-string": "error",
      "no-undef": "off", // Disable this because TypeScript's checks are better
      "no-unused-private-class-members": "error",
      "no-unused-vars": "off", // Disable this because TypeScript's checks are better (this hits a false positive with "(foo: number) => void")
      "no-use-before-define": "off", // Disable this in favor of TypeScript's checks
      "require-atomic-updates": "error",

      "consistent-return": "error",
      "consistent-this": ["error", "self"],
      "curly": ["error", "all"],
      "default-case-last": "error",
      "default-param-last": "error",
      "dot-notation": "error",
      "eqeqeq": "error",
      "func-names": ["error", "always"],
      "func-style": ["error", "declaration"],
      "grouped-accessor-pairs": ["error", "getBeforeSet"],
      "init-declarations": "off",
      "multiline-comment-style": ["error", "separate-lines"],
      "new-cap": "error",
      "no-array-constructor": "error",
      "no-div-regex": "error",
      // "no-else-return": "error", // It's nice to have this option
      "no-eval": "error",
      "no-extra-bind": "error",
      "no-extra-label": "error",
      "no-implicit-coercion": "error",
      "no-implied-eval": "error",
      "no-invalid-this": "error",
      "no-iterator": "error",
      "no-label-var": "error",
      "no-multi-assign": "error",
      "no-multi-str": "error",
      "no-new": "error",
      "no-new-func": "error",
      "no-new-wrappers": "error",
      "no-object-constructor": "error",
      "no-octal-escape": "error",
      "no-param-reassign": "error",
      "no-proto": "error",
      "no-redeclare": "error",
      "no-return-assign": "error",
      "no-script-url": "error",
      "no-sequences": "error",
      "no-throw-literal": "error",
      "no-unused-expressions": "error",
      "no-useless-call": "error",
      "no-useless-computed-key": "error",
      "no-useless-concat": "error",
      "no-useless-rename": "error",
      "no-useless-return": "error",
      "no-var": "error",
      "no-warning-comments": [
        "warn",
        {
          "terms": ["!!!"],
          "location": "anywhere",
        },
      ],
      "prefer-arrow-callback": "error",
      "prefer-const": "error",
      "prefer-exponentiation-operator": "error",
      "prefer-numeric-literals": "error",
      "prefer-object-spread": "error",
      "prefer-promise-reject-errors": "error",
      "prefer-regex-literals": "error",
      "prefer-rest-params": "error",
      "prefer-spread": "error",
      "prefer-template": "error",
      "require-await": "error",
      // "sort-imports": "error", // VS's auto sort differs from the expected order here
      "yoda": "error",

      "@stylistic/array-bracket-newline": ["error", "consistent"],
      "@stylistic/array-bracket-spacing": ["error", "never"],
      "@stylistic/array-element-newline": ["error", "consistent"],
      "@stylistic/arrow-parens": "error",
      "@stylistic/arrow-spacing": "error",
      "@stylistic/block-spacing": "error",
      "@stylistic/brace-style": ["error", "1tbs", { "allowSingleLine": true }],
      "@stylistic/comma-dangle": ["error", "always-multiline"],
      "@stylistic/comma-spacing": "error",
      "@stylistic/comma-style": "error",
      "@stylistic/computed-property-spacing": "error",
      "@stylistic/dot-location": ["error", "property"],
      "@stylistic/function-call-argument-newline": ["error", "consistent"],
      "@stylistic/function-call-spacing": "error",
      "@stylistic/generator-star-spacing": "error",
      "@stylistic/implicit-arrow-linebreak": "error",
      "@stylistic/indent": ["error", 2, { "SwitchCase": 0 }],
      "@stylistic/jsx-quotes": ["error", "prefer-double"],
      "@stylistic/key-spacing": ["error", { "beforeColon": false, "afterColon": true }],
      "@stylistic/keyword-spacing": "error",
      "@stylistic/lines-between-class-members": ["error", "always", { "exceptAfterSingleLine": true }],
      "@stylistic/max-len": [
        "warn",
        {
          "code": 160,
          "ignorePattern": "^\\s*import\\s+.+\\s+from\\s+.+;$",
        },
      ],
      "@stylistic/multiline-ternary": ["error", "always-multiline"],
      "@stylistic/new-parens": "error",
      "@stylistic/no-confusing-arrow": "error",
      "@stylistic/no-extra-semi": "error",
      "@stylistic/no-floating-decimal": "error",
      "@stylistic/no-mixed-operators": "off",
      "@stylistic/no-mixed-spaces-and-tabs": "error",
      "@stylistic/no-multi-spaces": ["error", { "ignoreEOLComments": true }],
      "@stylistic/no-multiple-empty-lines": ["error", { "max": 2, "maxBOF": 0, "maxEOF": 1 }],
      "@stylistic/no-tabs": "error",
      "@stylistic/no-trailing-spaces": "error",
      "@stylistic/no-whitespace-before-property": "error",
      "@stylistic/object-curly-newline": ["error", { "consistent": true }],
      "@stylistic/object-curly-spacing": ["error", "always"],
      "@stylistic/one-var-declaration-per-line": "error",
      "@stylistic/operator-linebreak": ["error", "before", { "overrides": { "=": "after" } }],
      "@stylistic/padded-blocks": ["error", "never"],
      // "@stylistic/padding-line-between-statements": // This is probably annoying to have so I'm disabling it.
      "@stylistic/quotes": ["error", "double", { "avoidEscape": true, "allowTemplateLiterals": true }],
      "@stylistic/rest-spread-spacing": "error",
      "@stylistic/semi": ["error", "always"],
      "@stylistic/semi-spacing": "error",
      "@stylistic/semi-style": "error",
      "@stylistic/space-before-blocks": "error",
      "@stylistic/space-before-function-paren": ["error", { "anonymous": "never", "named": "never", "asyncArrow": "always" }],
      "@stylistic/space-in-parens": "error",
      "@stylistic/space-infix-ops": "error",
      "@stylistic/space-unary-ops": "error",
      "@stylistic/spaced-comment": "error",
      "@stylistic/switch-colon-spacing": "error",
      "@stylistic/template-curly-spacing": "error",
      "@stylistic/template-tag-spacing": "error",
      "@stylistic/yield-star-spacing": "error",
      "@stylistic/member-delimiter-style": "error",
      "@stylistic/type-annotation-spacing": "error",

      "@stylistic/jsx-child-element-spacing": "error",
      "@stylistic/jsx-closing-bracket-location": "error",
      "@stylistic/jsx-closing-tag-location": "error",
      "@stylistic/jsx-curly-brace-presence": ["error", "never"],
      "@stylistic/jsx-curly-newline": "error",
      "@stylistic/jsx-curly-spacing": "error",
      "@stylistic/jsx-equals-spacing": "error",
      "@stylistic/jsx-first-prop-new-line": "error",
      "@stylistic/jsx-indent": ["error", 2],
      "@stylistic/jsx-indent-props": ["error", 2],
      "@stylistic/jsx-props-no-multi-spaces": "error",
      "@stylistic/jsx-self-closing-comp": "error",
      "@stylistic/jsx-tag-spacing": [
        "error",
        { "closingSlash": "never", "beforeSelfClosing": "always", "afterOpening": "never", "beforeClosing": "never" },
      ],

      "@typescript-eslint/consistent-type-definitions": "error",
      "@typescript-eslint/default-param-last": "error",
      "@typescript-eslint/explicit-function-return-type": ["error", { "allowExpressions": true }],
      "@typescript-eslint/explicit-member-accessibility": "error",
      "@typescript-eslint/explicit-module-boundary-types": "error",
      // "@typescript-eslint/member-ordering": "error", // $TODO enable this
      // "@typescript-eslint/method-signature-style": "error", // Haven't decided on this one yet
      "@typescript-eslint/no-confusing-non-null-assertion": "error",
      "@typescript-eslint/no-confusing-void-expression": ["error", { "ignoreArrowShorthand": true }],
      "@typescript-eslint/no-dupe-class-members": "error",
      "@typescript-eslint/no-invalid-this": "error",
      "@typescript-eslint/no-redeclare": "error",
      "@typescript-eslint/no-shadow": "error",
      "@typescript-eslint/no-unnecessary-condition": ["warn", { allowConstantLoopConditions: true }], // This is sometimes useful
      "@typescript-eslint/no-unnecessary-qualifier": "error",
      "@typescript-eslint/no-unused-expressions": "error",
      "@typescript-eslint/no-unused-vars": [
        "error",
        {
          "argsIgnorePattern": "^_",
          "destructuredArrayIgnorePattern": "^_",
          "caughtErrors": "none",
        },
      ],
      "@typescript-eslint/no-use-before-define": "error",
      "@typescript-eslint/non-nullable-type-assertion-style": "error",
      "@typescript-eslint/prefer-for-of": "error",
      "@typescript-eslint/prefer-function-type": "error",
      "@typescript-eslint/prefer-nullish-coalescing": "error",
      // "@typescript-eslint/prefer-optional-chain": "error", // This doesn't seem to handle falsy types quite right
      "@typescript-eslint/prefer-readonly": "error",
      "@typescript-eslint/prefer-readonly-parameter-types": "off", // This is too annoying, no-param-reassign already prevents modifying parameters
      "@typescript-eslint/prefer-regexp-exec": "error",
      "@typescript-eslint/prefer-string-starts-ends-with": "error",
      // "@typescript-eslint/promise-function-async": "error", // We don't always want this
      "@typescript-eslint/require-array-sort-compare": "error",
      "@typescript-eslint/restrict-template-expressions": ["error", { allowNumber: true }],
      "@typescript-eslint/return-await": "error",
      "@typescript-eslint/strict-boolean-expressions": "error",
      "@typescript-eslint/switch-exhaustiveness-check": "error",
      // "@typescript-eslint/typedef": "error", // Haven't decided
      "@typescript-eslint/unbound-method": [
        // This is a weird one. You can pass around a class method as a value, e.g. MyClass.foo, but if you try to then call it, 'this' won't have been captured
        // so you can run into type errors. Instead, you should pass () => myClassInstance.foo(). You would think this would not apply to static class
        // functions. However, static class functions can actually refer to 'this'. In this context, 'this' is an object with class descriptor info (such as
        // class name) rather than an instance reference. However, this is weird and we never do it so I'm disabling this rule for static class functions,
        // meaning you can simply use MyClass.foo as a callback if foo is a static function.
        "error",
        { "ignoreStatic": true },
      ],

      "react/boolean-prop-naming": "error",
      "react/button-has-type": "error",
      "react/no-access-state-in-setstate": "error",
      "react/no-adjacent-inline-elements": "error",
      "react/no-danger": "error",
      "react/no-invalid-html-attribute": "error",
      "react/no-typos": "error",
      "react/no-unused-state": "error",
      "react/prefer-stateless-function": "error",
      "react/prop-types": "off", // This causes annoying/useless errors when using props of built-in HTML elements
      "react/self-closing-comp": "error",
      "react/void-dom-elements-no-children": "error",
      "react/jsx-fragments": "error",
      "react/jsx-handler-names": "error",
      "react/jsx-no-constructed-context-values": "error",
      "react/jsx-no-script-url": "error",
      "react/jsx-no-useless-fragment": ["error", { "allowExpressions": true }],
      "react/jsx-pascal-case": "error",
      "react/jsx-props-no-multi-spaces": "error",
    },
  },
];
